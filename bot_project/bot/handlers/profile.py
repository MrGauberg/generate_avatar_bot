# bot/handlers/profile.py

from aiogram import Router, types
from aiogram.filters import Command
from bot.services.api_client import api_client

router = Router()


@router.message(Command("profile"))
async def profile_command_handler(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id

    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ...")

    try:
        response = await api_client._make_request("GET", f"{api_client.BASE_API_URL}/user/profile")
        
        if response:
            username = response.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            email = response.get("email", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            total_generations = response.get("total_generations", 0)
            remaining_generations = response.get("remaining_generations", 0)

            profile_text = (
                f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n"
                f"üÜî Telegram ID: `{user_id}`\n"
                f"üìõ –ò–º—è: {username}\n"
                f"üìß Email: {email}\n"
                f"üé® –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total_generations}\n"
                f"üñº –û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {remaining_generations}"
            )

            await message.answer(profile_text, parse_mode="Markdown")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
