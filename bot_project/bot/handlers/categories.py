# bot/handlers/categories.py

from aiogram import Router, types
from bot.services.api_client import api_client
from bot.keyboards.inline import get_categories_slider, get_styles_slider
from bot.utils.auth import require_authorization

router = Router()


@router.message(lambda message: message.text == "üé® –°—Ç–∏–ª–∏")
@require_authorization
async def styles_button_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∏–ª–∏'"""
    categories = await api_client.get_categories_list()
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_slider(categories))


@router.callback_query(lambda c: c.data.startswith("category_selected_"))
async def category_selected(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = callback.data.split("_")[2]
    category_id = None if category_id == "0" else int(category_id)
    category_name = callback.data.split("_")[3]

    styles = await api_client.get_styles_list(category_id)

    await callback.message.edit_text(
        f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}**\n\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –ø–æ–ª—É—á–∏ 2 —Ñ–æ—Ç–æ:",
        reply_markup=get_styles_slider(styles)
    )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("category_page_"))
async def category_pagination_handler(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    page = int(callback.data.split("_")[2])
    categories = await api_client.get_categories_list()
    await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_slider(categories, page))
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("style_page_"))
async def style_pagination_handler(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å—Ç–∏–ª–µ–π"""
    page = int(callback.data.split("_")[2])
    category_id = int(callback.data.split("_")[3])
    styles = await api_client.get_styles_list(category_id)
    await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏ –ø–æ–ª—É—á–∏—Ç–µ 2 —Ñ–æ—Ç–æ:", reply_markup=get_styles_slider(styles, page))
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("style_"))
async def style_selected(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    style_id = int(callback.data.split("_")[1])

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        response = await api_client.generate_user_image(prompt="", model_id=style_id)
        image_url = response.get("image_url")

        if image_url:
            await callback.message.answer_photo(photo=image_url, caption="‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await callback.answer()


@router.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = await api_client.get_categories_list()
    await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_slider(categories))
    await callback.answer()

