# bot/handlers/ukassa.py

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router, types
from bot.services.api_client import api_client
from bot.keyboards.inline import InlineKeyboardMarkup, InlineKeyboardButton, pay_keyboard
import logging

router = Router()


# üîπ –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ email
class PaymentState(StatesGroup):
    waiting_for_email = State()


@router.message(PaymentState.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    email = message.text.strip()

    if "@" not in email or "." not in email:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(email=email)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API
        packages = await api_client.get_package_types()
        if "error" in packages:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
        buttons = [
            [InlineKeyboardButton(text=f"üì¶ {pkg['name']} {pkg['total_generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - {pkg['amount']}‚ÇΩ", callback_data=f"payment_{pkg['id']}")]
            for pkg in packages
        ]

        await message.answer(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤.")


@router.callback_query(lambda c: c.data.startswith("payment_"))
async def create_payment(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
    package_type_id = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    email = user_data.get("email")

    if not email:
        respone  = await api_client.get_user_profile(callback.from_user.id)
        email = respone.get("email")

    if not email:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: Email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        tg_user_id = callback.from_user.id
        message = await callback.message.answer("üí≥ –û–∂–∏–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...")

        # –ü–µ—Ä–µ–¥–∞–µ–º `message_id` –≤ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        response = await api_client.create_payment(
            user_id=tg_user_id,
            email=email,
            package_type_id=package_type_id,
            message_id=message.message_id,
            telegram_id=tg_user_id
        )

        payment_url = response.get("payment_url")

        if payment_url:
            await message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
                reply_markup=pay_keyboard(payment_url)
            )
        else:
            await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await callback.answer()

