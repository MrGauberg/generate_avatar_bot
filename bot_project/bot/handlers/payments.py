# bot/handlers/payments.py

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.services.api_client import api_client

router = Router()


async def get_payment_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    packages = [
        {"id": 1, "name": "–ü—Ä–æ–±–Ω—ã–π", "price": 199, "generations": 10},
        {"id": 2, "name": "–°—Ç–∞—Ä—Ç", "price": 499, "generations": 15},
        {"id": 3, "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "price": 1999, "generations": 30},
        {"id": 4, "name": "–ü—Ä–µ–º–∏—É–º", "price": 2999, "generations": 60},
    ]
    
    buttons = [
        [InlineKeyboardButton(text=f"{pkg['name']} - {pkg['price']} —Ä—É–±.", callback_data=f"buy_{pkg['id']}")]
        for pkg in packages
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(Command("buy"))
async def buy_command_handler(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    keyboard = await get_payment_keyboard()
    await message.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("buy_"))
async def handle_payment(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    package_id = callback_query.data.split("_")[1]
    user_id = callback_query.from_user.id

    await callback_query.message.edit_text("‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        response = await api_client.purchase_generation_package(int(package_id))
        payment_url = response.get("payment_url")

        if payment_url:
            await callback_query.message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: [–û–ø–ª–∞—Ç–∏—Ç—å]({payment_url})",
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
        else:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
    except Exception as e:
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
