
# bot/handlers/instruction.py

from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
from bot.services.api_client import api_client
from aiogram.fsm.context import FSMContext

from bot.handlers.ukassa import PaymentState

router = Router()

logging.basicConfig(level=logging.INFO)

@router.callback_query(lambda c: c.data == "start_instruction")
async def instruction_step_1(callback: types.CallbackQuery):
    """–ü–µ—Ä–≤—ã–π —à–∞–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞"""
    await callback.message.edit_text(
        "‚Ñπ **–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
        "üì∏ –í—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ 10 —Ñ–æ—Ç–æ, –∏ –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä.\n"
        "üé® –ó–∞—Ç–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö.\n\n"
        "‚úÖ **–í—Å–µ –ø–æ–Ω—è–ª!** ‚Üí –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–æ—Ç–æ",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–í—Å–µ –ø–æ–Ω—è–ª!", callback_data="instruction_photo_format")]]
        )
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "instruction_photo_format")
async def instruction_step_2(callback: types.CallbackQuery):
    """–í—Ç–æ—Ä–æ–π —à–∞–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–æ—Ç–æ"""
    await callback.message.edit_text(
        "üìè **–§–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π**\n\n"
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä, –∑–∞–≥—Ä—É–∑–∏—Ç–µ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:\n"
        "- **–†–∞–∑–Ω—ã–µ –ø–æ–∑—ã**\n"
        "- **–•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ**\n"
        "- **–ë–µ–∑ –æ—á–∫–æ–≤ –∏ –≥–æ–ª–æ–≤–Ω—ã—Ö —É–±–æ—Ä–æ–≤**\n\n"
        "‚û° **–î–∞–ª—å—à–µ!** ‚Üí –û–ø–∏—Å–∞–Ω–∏–µ –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–î–∞–ª—å—à–µ!", callback_data="instruction_modes")]]
        )
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "instruction_modes")
async def instruction_step_3(callback: types.CallbackQuery):
    """–¢—Ä–µ—Ç–∏–π —à–∞–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - –¥–≤–∞ —Ä–µ–∂–∏–º–∞"""
    await callback.message.edit_text(
        "‚ö° **–î–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã**\n\n"
        "1Ô∏è‚É£ **–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º** - –í—ã–±–∏—Ä–∞–π—Ç–µ —Å—Ç–∏–ª–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ.\n"
        "2Ô∏è‚É£ **–†–µ–∂–∏–º –ë–æ–≥–∞** - –í–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç —Ä–µ–∂–∏–º –∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å.\n\n"
        "üí∞ **–ê —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?**",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ê —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?", callback_data="instruction_prices")]]
        )
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "instruction_prices")
async def instruction_step_4(callback: types.CallbackQuery):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API
        packages = await api_client.get_package_types()
        if "error" in packages:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–∞–∫–µ—Ç–∞–º–∏
        packages_text = "\n".join(
            [f"üì¶ **{pkg['name']}** - {pkg['amount']}‚ÇΩ ({pkg['total_generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π)" for pkg in packages]
        )

        await callback.message.edit_text(
            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–æ–≤**\n\n{packages_text}\n\n‚úÖ **–ö—É–ø–∏—Ç—å** ‚Üí –ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="start_buy")]]
            ),
            parse_mode="Markdown"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤.")

    await callback.answer()



@router.callback_query(lambda c: c.data == "start_buy")
async def confirm_terms(callback: types.CallbackQuery):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    await callback.message.edit_text(
        "üìú **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ**\n\n"
        "–ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:\n"
        "[–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ](https://example.com/terms)\n\n"
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="start_payment_email")]]
        )
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "start_payment_email")
async def request_email(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å email –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    await callback.message.edit_text(
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:"
    )
    await state.set_state(PaymentState.waiting_for_email)
    await callback.answer()
