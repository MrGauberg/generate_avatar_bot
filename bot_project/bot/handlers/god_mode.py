# bot/handlers/god_mode.py

from aiogram import Router, types

from aiogram.filters import StateFilter

from bot.services.api_client import api_client
from bot.keyboards.inline import get_packages_keyboard, god_mode_keyboard, god_mode_instruction_keyboard
from bot.utils.auth import require_authorization

router = Router()



@router.message(lambda message: message.text == "üîÆ –†–µ–∂–∏–º –ë–æ–≥–∞")
@require_authorization
async def god_mode_menu(event: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–∂–∏–º –ë–æ–≥–∞'"""
    user_id = event.from_user.id
    user_data = await api_client.get_user_profile(user_id)
    is_god_mode_enabled = user_data.get("god_mode", False)

    if isinstance(event, types.CallbackQuery):
        await event.message.edit_text(
            "üîÆ **–†–µ–∂–∏–º –ë–æ–≥–∞**\n\n"
            "–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.",
            reply_markup=god_mode_keyboard(is_god_mode_enabled)
        )
    else:
        await event.answer(
            "üîÆ **–†–µ–∂–∏–º –ë–æ–≥–∞**\n\n"
            "–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.",
            reply_markup=god_mode_keyboard(is_god_mode_enabled)
        )



@router.callback_query(lambda c: c.data == "godmode_menu")
async def god_mode_menu_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∂–∏–º–∞ –ë–æ–≥–∞"""
    user_id = callback.from_user.id
    user_data = await api_client.get_user_profile(user_id)
    is_god_mode_enabled = user_data.get("god_mode", False)

    await callback.message.edit_text(
        "üîÆ **–†–µ–∂–∏–º –ë–æ–≥–∞**\n\n"
        "–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.",
        reply_markup=god_mode_keyboard(is_god_mode_enabled)
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "godmode_instruction")
async def god_mode_instruction_callback(callback: types.CallbackQuery):
    """–í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –ë–æ–≥–∞"""
    await callback.message.edit_text(
        "‚Ñπ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–∂–∏–º—É –ë–æ–≥–∞**\n\n"
        "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ –æ–Ω –µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç!\n\n"
        "üìå –ù–∞–ø—Ä–∏–º–µ—Ä: *'–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ç –≤ –æ—á–∫–∞—Ö'*\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
        reply_markup=god_mode_instruction_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "godmode_toggle")
async def toggle_god_mode_callback(callback: types.CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ë–æ–≥–∞"""
    user_id = callback.from_user.id
    user_data = await api_client.get_user_profile(user_id)
    is_god_mode_enabled = user_data.get("god_mode", False)

    try:
        await api_client.set_god_mode(user_id, not is_god_mode_enabled)

        user_data = await api_client.get_user_profile(user_id)
        is_god_mode_enabled = user_data.get("god_mode", False)

        new_text = (
            "‚úÖ **–†–µ–∂–∏–º –ë–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç—É, –∏ –æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            if is_god_mode_enabled else "‚ùå **–†–µ–∂–∏–º –ë–æ–≥–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.**"
        )

        await callback.message.edit_text(new_text, reply_markup=god_mode_keyboard(is_god_mode_enabled))

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await callback.answer()


@router.message(StateFilter(None), lambda message: message.text)
async def generate_image_in_god_mode(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –≤ —Ä–µ–∂–∏–º–µ '–ë–æ–≥–∞' (–µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∂–¥–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö)"""
    
    user_id = message.from_user.id
    user_data = await api_client.get_user_profile(user_id)
    is_god_mode_enabled = user_data.get("god_mode", False)

    if not is_god_mode_enabled:
        return
    
    remaining_generations = await api_client.get_user_generations(user_id)
    if remaining_generations <= 0:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=get_packages_keyboard()
        )
        return

    await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚åõ")
    
    try:
        response = await api_client.generate_user_image(prompt=message.text, user_id=user_id)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


