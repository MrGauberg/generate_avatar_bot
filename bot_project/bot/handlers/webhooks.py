from aiohttp import web
from aiogram import Bot
from bot.config import Settings
import logging

from bot.services.redis_client import redis_client
from bot.keyboards.inline import get_packages_keyboard
from bot.keyboards.reply import main_menu_keyboard
from aiogram.types import InputMediaPhoto


bot = Bot(token=Settings.bot.TOKEN)

IMAGES_COUNT = Settings.service.IMAGES_COUNT



async def handle_payment_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        message_id = data.get("message_id")
        payment_type = data.get("payment_type")
        total_generations = data.get("total_generations")

        if not user_id or not message_id:
            return web.json_response({"error": "Missing user_id or message_id"}, status=400)

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤ Redis
        await redis_client.clear_photos(user_id)
        await redis_client.set_user_state(user_id, "waiting_for_photos")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        if payment_type == "avatar":
            await bot.edit_message_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {IMAGES_COUNT} —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.",
                chat_id=user_id,
                message_id=message_id
            )
        elif payment_type == "package":
            await bot.edit_message_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ +{total_generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.",
                chat_id=user_id,
                message_id=message_id
            )

        return web.json_response({"message": "Payment confirmed"}, status=200)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.json_response({"error": str(e)}, status=500)
    


async def handle_payment_reminder_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        data = await request.json()
        user_id = data.get("user_id")

        if not user_id:
            return web.json_response({"error": "Missing user_id"}, status=400)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_text = (
            "‚ö† –í–∏–¥–∏–º, —á—Ç–æ –≤—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
            "üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤:"
        )

        await bot.send_message(
            chat_id=user_id,
            text=message_text,
            reply_markup=get_packages_keyboard()
        )

        return web.json_response({"message": "Payment reminder sent"}, status=200)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")
        return web.json_response({"error": str(e)}, status=500)


async def handle_avatar_ready_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞.
    
    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ:
    "–ú—ã —Å–æ–∑–¥–∞–ª–∏ —Ç–≤–æ–π –∞–≤–∞—Ç–∞—Ä, –º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
    """
    try:
        data = await request.json()
        telegram_id = data.get("telegram_id")
        
        if not telegram_id:
            return web.json_response({"error": "Missing telegram_id"}, status=400)
        
        message_text = "–ú—ã —Å–æ–∑–¥–∞–ª–∏ —Ç–≤–æ–π –∞–≤–∞—Ç–∞—Ä, –º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
        await bot.send_message(chat_id=telegram_id, text=message_text, reply_markup=main_menu_keyboard())
        
        return web.json_response({"message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}, status=200)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        return web.json_response({"error": str(e)}, status=500)


async def handle_generation_ready_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    
    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    try:
        data = await request.json()
        telegram_id = data.get("telegram_id")
        image_urls = data.get("image_urls")
        
        if not telegram_id or not image_urls:
            return web.json_response({"error": "Missing telegram_id –∏–ª–∏ image_urls"}, status=400)
                
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∏–¥–µ –≥–∞–ª–µ—Ä–µ–∏
        media = [InputMediaPhoto(media=url) for url in image_urls]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        await bot.send_media_group(chat_id=telegram_id, media=media)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await bot.send_message(chat_id=telegram_id, text="‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        
        return web.json_response({"message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}, status=200)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return web.json_response({"error": str(e)}, status=500)

