# bot/handlers/avatar.py

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from bot.services.api_client import api_client

router = Router()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–∞–º—è—Ç–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_photos = {}

GENDER_CHOICES = {
    "–ú—É–∂—á–∏–Ω–∞": "male",
    "–ñ–µ–Ω—â–∏–Ω–∞": "female",
    "–†–µ–±–µ–Ω–æ–∫": "child"
}

async def request_gender_choice(message: types.Message):
    """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞")],
            [KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")],
            [KeyboardButton(text="–†–µ–±–µ–Ω–æ–∫")]
        ],
        resize_keyboard=True
    )
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∞–≤–∞—Ç–∞—Ä–∞:", reply_markup=keyboard)


@router.message(Command("avatar"))
async def avatar_command_handler(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞. "
        "–û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω—ã–º–∏!"
    )
    user_photos[message.from_user.id] = []


@router.message(lambda message: message.photo)
async def handle_photo_upload(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = message.from_user.id

    if user_id not in user_photos:
        user_photos[user_id] = []

    user_photos[user_id].append(message.photo[-1].file_id)

    if len(user_photos[user_id]) < 10:
        await message.answer(f"üì∑ –ü—Ä–∏–Ω—è—Ç–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_photos[user_id])}/10 —Ñ–æ—Ç–æ.")
    else:
        await message.answer("‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        await request_gender_choice(message)


@router.message(lambda message: message.text in GENDER_CHOICES)
async def handle_gender_choice(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    user_id = message.from_user.id
    gender = GENDER_CHOICES[message.text]

    if user_id not in user_photos or len(user_photos[user_id]) < 10:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ 10 —Ñ–æ—Ç–æ!")
        return

    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    files = [("images", (f"photo_{i}.jpg", await message.bot.download_file_by_id(photo_id), "image/jpeg"))
             for i, photo_id in enumerate(user_photos[user_id])]

    try:
        response = await api_client.upload_avatar(files=files, gender=gender)
        avatar_id = response.get("avatar_id")
        if avatar_id:
            await message.answer(f"üéâ –ê–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω! ID: {avatar_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del user_photos[user_id]
