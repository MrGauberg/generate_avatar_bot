# bot/handlers/avatar.py

from aiogram import Router, types, Bot
from bot.services.api_client import api_client
from bot.config import Settings
from bot.keyboards.inline import gender_selection_keyboard
import tempfile
import os
import logging
import aiofiles

router = Router()

MAX_PHOTOS = Settings.service.AVATAR_IMAGES_COUNT

# –•—Ä–∞–Ω–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_photos = {}
GENDER_CHOICES = {
    "avatar_gender_male": "male",
    "avatar_gender_female": "female",
    "avatar_gender_child": "child"
}


@router.callback_query(lambda c: c.data == "menu_create_avatar")
async def avatar_callback_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä'"""
    await callback.message.edit_text(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ {MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.\n"
        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω—ã–º–∏!"
    )
    user_photos[callback.from_user.id] = []
    await callback.answer()


@router.message(lambda message: message.photo)
async def handle_photo_upload(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = message.from_user.id

    if user_id not in user_photos:
        user_photos[user_id] = []

    user_photos[user_id].append(message.photo[-1].file_id)

    if len(user_photos[user_id]) < MAX_PHOTOS:
        await message.answer(f"üì∑ –ü—Ä–∏–Ω—è—Ç–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_photos[user_id])}/{MAX_PHOTOS} —Ñ–æ—Ç–æ.")
    else:
        await message.answer("‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∞–≤–∞—Ç–∞—Ä–∞:", reply_markup=gender_selection_keyboard())


@router.callback_query(lambda c: c.data in GENDER_CHOICES)
async def handle_gender_choice(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    user_id = callback.from_user.id
    gender = GENDER_CHOICES[callback.data]

    if user_id not in user_photos or len(user_photos[user_id]) < MAX_PHOTOS:
        await callback.message.edit_text(f"‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ {MAX_PHOTOS} —Ñ–æ—Ç–æ!")
        return

    await callback.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    files = []
    temp_files = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    try:
        for i, photo_id in enumerate(user_photos[user_id]):
            temp_file_path = os.path.join(tempfile.gettempdir(), f"photo_{i}.jpg")

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –í –§–ê–ô–õ, –∞ –Ω–µ –≤ –ø–æ—Ç–æ–∫
            await bot.download(photo_id, destination=temp_file_path)

            temp_files.append(temp_file_path)

            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è API
            async with aiofiles.open(temp_file_path, "rb") as temp_file:
                file_data = await temp_file.read()
                if file_data:
                    files.append(("images", (f"photo_{i}.jpg", file_data, "image/jpeg")))

        print("–§–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –≤ API:", len(files))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ API
        response = await api_client.upload_avatar(files=files, gender=gender)
        avatar_id = response.get("avatar_id")

        if avatar_id:
            await callback.message.edit_text(f"üéâ –ê–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω! ID: {avatar_id}")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for temp_file_path in temp_files:
            try:
                os.remove(temp_file_path)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {temp_file_path}: {e}")

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del user_photos[user_id]
    await callback.answer()
