# bot/handlers/avatar.py

from aiogram import Router, types, Bot
from bot.services.api_client import api_client
from bot.config import Settings
from bot.keyboards.inline import (
    add_avatar_keyboard,
    avatar_menu_keyboard,
    gender_selection_keyboard,
    get_avatar_slider_keyboard,
)
import tempfile
import os
import logging
import aiofiles
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.utils.auth import require_authorization

from bot.services.redis_client import redis_client

router = Router()

MAX_PHOTOS = Settings.service.IMAGES_COUNT

# –•—Ä–∞–Ω–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_photos = {}
GENDER_CHOICES = {
    "avatar_gender_male": "male",
    "avatar_gender_female": "female",
    "avatar_gender_child": "child",
}


@router.callback_query(lambda c: c.data == "menu_create_avatar")
async def avatar_callback_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä'"""
    await redis_client.clear_photos(callback.from_user.id)
    user_id = callback.from_user.id
    await redis_client.set_user_state(user_id, "waiting_for_photos")

    await callback.message.edit_text(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ {MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.\n"
        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω—ã–º–∏!"
    )
    await callback.answer()


@router.message(lambda message: message.photo)
async def handle_photo_upload(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = message.from_user.id

    user_state = await redis_client.get_user_state(user_id)

    if user_state != "waiting_for_photos":
        await message.answer("‚ö† –°–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
        return
    
    photos = await redis_client.get_photos(user_id)
    if len(photos) >= MAX_PHOTOS:
        await message.answer("‚ö† –í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ!")
        return

    # –ë–µ—Ä–µ–º –¢–û–õ–¨–ö–û —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    largest_photo = message.photo[-1].file_id
    await redis_client.save_photo(user_id, largest_photo)

    photos = await redis_client.get_photos(user_id)
    uploaded_count = len(photos)

    if uploaded_count < MAX_PHOTOS:
        await message.answer(f"üì∑ –ü—Ä–∏–Ω—è—Ç–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {uploaded_count}/{MAX_PHOTOS} —Ñ–æ—Ç–æ.")
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–æ–≤ –∏–∑ API –æ–¥–∏–Ω —Ä–∞–∑
        genders = await api_client.get_avatar_genders()
        
        await redis_client.set_user_state(user_id, "waiting_for_gender")
        await message.answer(
            "‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∞–≤–∞—Ç–∞—Ä–∞:",
            reply_markup=gender_selection_keyboard(genders),
        )



@router.callback_query(lambda c: c.data.startswith("avatar_gender_"))
async def handle_gender_choice(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–æ–≤ –∏–∑ API
    genders = await api_client.get_avatar_genders()
    gender_id = int(callback.data.split("_")[-1])
    gender = genders.get(gender_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

    photos = await redis_client.get_photos(user_id)

    if len(photos) < MAX_PHOTOS:
        await callback.message.edit_text(
            f"‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ {MAX_PHOTOS} —Ñ–æ—Ç–æ!"
        )
        return

    await callback.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    files = []
    temp_files = []  

    try:
        for i, photo_id in enumerate(photos):
            temp_file_path = os.path.join(tempfile.gettempdir(), f"photo_{i}.jpg")

            await bot.download(photo_id, destination=temp_file_path)
            temp_files.append(temp_file_path)

            async with aiofiles.open(temp_file_path, "rb") as temp_file:
                file_data = await temp_file.read()
                if file_data:
                    files.append(("images", (f"photo_{i}.jpg", file_data, "image/jpeg")))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ API
        response = await api_client.create_avatar(files=files, gender=gender_id, tg_user_id=user_id)
        avatar_id = response.get("avatar_id")

        if avatar_id:
            await redis_client.set_user_authorized(user_id, True)
            await callback.message.edit_text(f"üéâ –ê–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω! ID: {avatar_id}. –ú–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    finally:
        for temp_file_path in temp_files:
            try:
                os.remove(temp_file_path)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {temp_file_path}: {e}")

        await redis_client.clear_photos(user_id)

    await callback.answer()




@router.message(lambda message: message.text == "üñº –ê–≤–∞—Ç–∞—Ä")
@require_authorization
async def avatar_button_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ê–≤–∞—Ç–∞—Ä'"""
    await message.answer(
        "üë§ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, —Å –ª–∏—Ü–æ–º –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
        reply_markup=avatar_menu_keyboard(),
    )


@router.callback_query(lambda c: c.data == "avatar_select")
async def select_avatar_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞ (–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–∑ API)"""
    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤...")

    try:
        avatars = await api_client.get_user_avatars(callback.from_user.id)
        if not avatars:
            await callback.message.edit_text(
                "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤. –î–æ–±–∞–≤—å –Ω–æ–≤—ã–π!"
            )
            return

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä:", reply_markup=get_avatar_slider_keyboard(avatars)
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}"
        )

    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("avatar_page_"))
async def avatar_pagination_handler(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    page = int(callback.data.split("_")[2])
    avatars = await api_client.get_user_avatars(callback.from_user.id)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä:", reply_markup=get_avatar_slider_keyboard(avatars, page)
    )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("avatar_select"))
async def activate_avatar_handler(callback: types.CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"""
    avatar_id = int(callback.data.split("_")[2])
    avatar_name = callback.data.split("_")[3]

    try:
        response = await api_client.activate_avatar(avatar_id)
        if not response.get("error"):
            await callback.message.edit_text(
                f"–ú–æ–¥–µ–ª—å {avatar_name} –≤—ã–±—Ä–∞–Ω–∞, —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é‚úÖ"
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤–∞—Ç–∞—Ä–∞.")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await callback.answer()


@router.callback_query(lambda c: c.data == "avatar_menu")
async def return_to_avatar_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    await callback.message.edit_text(
        "üë§ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, —Å –ª–∏—Ü–æ–º –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
        reply_markup=avatar_menu_keyboard(),
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "avatar_add")
async def add_avatar_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏ –ø–æ–∫—É–ø–∫–∞ —Å–ª–æ—Ç–∞"""
    tg_user_id = callback.from_user.id
    response = await api_client.check_avatar_slots(tg_user_id)

    if response.get("can_add_avatar"):
        await callback.message.edit_text(
            "üì∏ –£ –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç! –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∞–≤–∞—Ç–∞—Ä–∞."
        )
        await avatar_callback_handler(callback)
    else:
        price = await api_client.get_avatar_price()
        await callback.message.edit_text(
            f"üîπ –£ –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.\n"
            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞: {price:.2f}‚ÇΩ**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=add_avatar_keyboard(),
        )
    await callback.answer()


@router.callback_query(lambda c: c.data == "avatar_buy")
async def buy_avatar_handler(callback: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
    await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        tg_user_id = callback.from_user.id
        data = {
            "telegram_id": tg_user_id,
            "message_id": callback.message.message_id,
        }
        response = await api_client.buy_avatart_slot(data)

        payment_url = response.get("payment_url")

        if payment_url:
            await callback.message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]
                    ]
                ),
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await callback.answer()
