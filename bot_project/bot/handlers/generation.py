from aiogram import Router, types
from bot.services.api_client import api_client
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.keyboards.inline import get_categories_keyboard, get_styles_keyboard
from bot.keyboards.inline import get_packages_keyboard
from bot.utils.auth import require_authorization

router = Router()


@router.message(lambda message: message.text == "üí∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏")
@router.callback_query(lambda c: c.data == "back_to_generations")
@require_authorization
async def generations_button_handler(event: types.Message | types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏'"""

    if isinstance(event, types.Message):
        message = event
        is_callback = False
    else:
        message = event.message
        is_callback = True

    user_id = event.from_user.id


    try:
        user_packages = await api_client.get_user_packages(user_id)

        if not isinstance(user_packages, list):
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è—Ö.")
            return

        if not user_packages:
            if is_callback:
                await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.", reply_markup=get_packages_keyboard())
            else:
                await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.", reply_markup=get_packages_keyboard())
            return

        packages_text = "\n".join(
            [f"üì¶ **{pkg.get('package_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç')}** ‚Äî –û—Å—Ç–∞–ª–æ—Å—å {pkg.get('generations_remains', 0)} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
             for pkg in user_packages]
        )

        total_generations = sum(pkg.get("generations_remains", 0) for pkg in user_packages)

        text = (
            f"üí∞ **–í–∞—à–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n\n"
            f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: **{total_generations}**\n\n"
            f"{packages_text}\n\n"
            "üîπ –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç –Ω–∏–∂–µ:"
        )

        if is_callback:
            await message.edit_text(text, reply_markup=get_packages_keyboard())
        else:
            await message.answer(text, reply_markup=get_packages_keyboard())

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")




@router.callback_query(lambda c: c.data == "back_to_generations")
async def back_to_generations_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è—Ö"""
    await generations_button_handler(callback)
    await callback.answer()



@router.callback_query(lambda c: c.data == "menu_generate_images")
async def generate_menu_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'"""
    await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await get_category_buttons())
    await callback.answer()


async def get_category_buttons():
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    categories = await api_client.get_categories_list()
    return get_categories_keyboard(categories)


async def get_style_buttons(category_id, user_id):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∏–ª—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    styles = await api_client.get_styles_list(user_id=user_id)
    return get_styles_keyboard(styles, category_id)


@router.callback_query(lambda c: c.data.startswith("generate_"))
async def generate_image_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    style_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        response = await api_client.generate_user_image(prompt="", user_id=user_id)
        image_url = response.get("image_url")

        if image_url:
            await callback.message.answer_photo(photo=image_url, caption="‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await callback.answer()


@router.callback_query(lambda c: c.data == "choose_package")
async def choose_package_handler(callback: types.CallbackQuery):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã...")

    try:
        packages = await api_client.get_package_types()
        if not packages:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤.")
            return

        buttons = [
            [InlineKeyboardButton(text=f"üì¶ {pkg['name']} {pkg['total_generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - {pkg['amount']}‚ÇΩ", callback_data=f"payment_{pkg['id']}")]
            for pkg in packages
        ]
        buttons.append([InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_generations")])

        await callback.message.edit_text(
            "üí∞ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:**",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            
        )

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")

    await callback.answer()