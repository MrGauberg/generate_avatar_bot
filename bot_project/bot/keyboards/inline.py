# bot/keyboards/inline.py

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.config import Settings
from bot.services.api_client import api_client



def gender_selection_keyboard(genders: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ API"""
    buttons = [[InlineKeyboardButton(text=f"üë§ {name}", callback_data=f"avatar_gender_{gender_id}")]
               for gender_id, name in genders.items()]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_categories_keyboard(categories):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    buttons = [
        [InlineKeyboardButton(text=category["name"], callback_data=f"category_{category['id']}")]
        for category in categories
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_styles_keyboard(styles, category_id=None):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª–µ–π"""
    filtered_styles = [style for style in styles if category_id is None or style["category"] == category_id]
    
    buttons = [
        [InlineKeyboardButton(text=style["name"], callback_data=f"generate_{style['id']}")]
        for style in filtered_styles
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)



def support_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    buttons = [
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url=f"https://t.me/{Settings.user.tg_user_name}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def start_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º"""
    buttons = [
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="start_buy")],
        [InlineKeyboardButton(text="‚Ñπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="start_instruction")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def pay_keyboard(payment_url):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
    return InlineKeyboardMarkup(inline_keyboard=[[button]])


def avatar_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
    buttons = [
        [InlineKeyboardButton(text="üñº –í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="avatar_select")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="avatar_add")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_avatar_slider_keyboard(avatars, page=0):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏ (—Å–ª–∞–π–¥–µ—Ä –ø–æ 3 —à—Ç—É–∫–∏)"""
    buttons = []
    avatars_per_page = 3
    start_index = page * avatars_per_page
    end_index = start_index + avatars_per_page
    paged_avatars = avatars[start_index:end_index]

    for avatar in paged_avatars:
        active = " ‚úÖ" if avatar.get("is_active", False) else ""
        avatar_id = f" ‚Ññ {avatar.get('id')}" if avatar.get("id") else ""
        print(avatar)
        buttons.append([InlineKeyboardButton(text=f"üñº {avatar['name']}{avatar_id}{active}", callback_data=f"avatar_select_{avatar['id']}_{avatar['name']}")])

    nav_buttons = []
    if start_index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"avatar_page_{page - 1}"))
    else:
        if len(avatars) > avatars_per_page:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
    if len(avatars) > avatars_per_page:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
    if end_index < len(avatars):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"avatar_page_{page + 1}"))
    else:
        if len(avatars) > avatars_per_page:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    if nav_buttons:
        buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="avatar_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)



def add_avatar_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å", callback_data="avatar_buy")],
            [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")]
        ]
    )

def get_packages_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç'"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç", callback_data="choose_package")]
        ]
    )


PHOTO_FORMATS = {
    "1:1": "1:1",
    "3:4": "3:4",
    "9:16": "9:16",
    "16:9": "16:9"
}

def settings_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìè –§–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ", callback_data="settings_photo_format")]
        ]
    )

def photo_format_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–æ—Ç–æ"""
    buttons = [
        [InlineKeyboardButton(text=format_option, callback_data=f"set_photo_format_{PHOTO_FORMATS[format_option]}")]
        for format_option in PHOTO_FORMATS.keys()
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def god_mode_keyboard(is_enabled: bool):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ '–ë–æ–≥–∞'"""
    buttons = [
        [InlineKeyboardButton(
            text="‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ë–æ–≥–∞" if is_enabled else "üîÆ –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ë–æ–≥–∞",
            callback_data="godmode_toggle"
        )],
        [InlineKeyboardButton(text="‚Ñπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="godmode_instruction")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def god_mode_instruction_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –ë–æ–≥–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="godmode_menu")]]
    )



def get_categories_slider(categories, page=0):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—Å–ª–∞–π–¥–µ—Ä –ø–æ 3 —à—Ç—É–∫–∏)"""
    categories.insert(0, {"id": 0, "name": "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}) 

    buttons = []
    categories_per_page = 3
    start_index = page * categories_per_page
    end_index = start_index + categories_per_page
    paged_categories = categories[start_index:end_index]

    for category in paged_categories:
        category_name = category["name"]
        category_id = category["id"]
        buttons.append([
            InlineKeyboardButton(text=category_name, callback_data=f"category_selected_{category_id}_{category_name}")
        ])

    nav_buttons = []
    if start_index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"category_page_{page - 1}"))
    else:
        if len(categories) > categories_per_page:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    if len(categories) > categories_per_page:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
    if end_index < len(categories):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"category_page_{page + 1}"))
    else:
        if len(categories) > categories_per_page:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    if nav_buttons:
        buttons.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_styles_slider(styles, page=0):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–ª–∞–π–¥–µ—Ä–æ–º —Å—Ç–∏–ª–µ–π (–ø–æ 3 —à—Ç—É–∫–∏)"""
    buttons = []
    styles_per_page = 3
    start_index = page * styles_per_page
    end_index = start_index + styles_per_page
    paged_styles = styles[start_index:end_index]
    category_id = paged_styles[0]["category"]

    for style in paged_styles:
        buttons.append([InlineKeyboardButton(text=style["name"], callback_data=f"style_{style['id']}")])

    nav_buttons = []
    if start_index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"style_page_{page - 1}_{category_id}"))
    else:
        if len(styles) > styles_per_page:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    if len(styles) > styles_per_page:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    if end_index < len(styles):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"style_page_{page + 1}_{category_id}"))
    else:
        if len(styles) > styles_per_page:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)
